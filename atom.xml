<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akira&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://akirakk.top/"/>
  <updated>2018-11-19T09:59:23.373Z</updated>
  <id>https://akirakk.top/</id>
  
  <author>
    <name>Akira</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于JavaScript闭包</title>
    <link href="https://akirakk.top/2018/11/19/%E5%85%B3%E4%BA%8EJavaScript%E9%97%AD%E5%8C%85/"/>
    <id>https://akirakk.top/2018/11/19/关于JavaScript闭包/</id>
    <published>2018-11-19T07:56:39.000Z</published>
    <updated>2018-11-19T09:59:23.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是闭包"><a href="#1-什么是闭包" class="headerlink" title="1.什么是闭包?"></a>1.什么是闭包?</h2><p>   官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p><p>   em…太难懂了，我的理解是：<strong>闭包就是能够读取其他函数内部变量的函数。</strong></p><p>   这里就涉及到了JavaScript中的全局变量和局部变量，在函数内部的定义的变量，它的作用域只能在该函数内部使用，这就是一个局部变量；在该函数内部既可以读取全局变量也可以用内部定义的局部变量，而如何在函数的外部调用该函数的局部变量呢？</p><p>   比如：如何获取f1()内n的值呢：<br><a id="more"></a><br>    function f1(){<br>       var n=1;<br>       //函数内部声明变量的时候，一定要使用var命令。如果不用的话，实际上声明了一个全局变量！<br>    }<br>    alert(n) //error </p><p>   函数内部的变量即局部变量，只有函数内部的子函数才能读取，通过在函数外部调用其子函数来读取该函数的内部变量，这就是闭包，所以闭包的本质就是一座桥梁，将函数内部和函数外部连接起来。</p><pre><code>function f1(){   var n=1;   function f2(){     alert(n);  //n=1   }}</code></pre><p>   由此可见，f2可以读取f1中的局部变量，那么只要把f2作为返回值，就可以在f1外部读取它的内部变量了。</p><pre><code>function f1(){   var n=1;   function f2(){     alert(n);   }   return f2;}var func=f1();func(); //结果为：1</code></pre><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><h3 id="1-闭包的简单使用"><a href="#1-闭包的简单使用" class="headerlink" title="1.闭包的简单使用"></a>1.闭包的简单使用</h3><p>通常情况下，我们所写的 JavaScript 代码都是基于事件定义某种行为，然后将其添加到用户触发的事件之上（比如点击或者按键），代码通常作为回调：为响应事件而执行的函数。</p><p>假如，我们想在页面上添加一些可以调整字号的按钮：</p><pre><code>body {   font-family: Helvetica, Arial, sans-serif;   font-size: 12px;}h1 {  font-size: 1.5em;}h2 {  font-size: 1.2em;}</code></pre><p>文本尺寸调整按钮可以修改 body 元素的 font-size 属性，由于我们使用相对单位，页面中的其它元素也会相应地调整，JavaScript代码：</p><pre><code>function setSize(size) {  return function() {    document.body.style.fontSize = size + &apos;px&apos;;  };}var size12 = setSizer(12);var size14 = setSizer(14);var size16 = setSizer(16);</code></pre><p>html中添加设置字号的按钮：</p><pre><code>&lt;button id=&quot;size-12&quot;&gt;字号12&lt;/button&gt;&lt;button id=&quot;size-14&quot;&gt;字号14&lt;/button&gt;&lt;button id=&quot;size-16&quot;&gt;字号16&lt;/button&gt;</code></pre><p>将它们分别添加到按钮的点击事件上：</p><pre><code>document.getElementById(&apos;size-12&apos;).onclick = size12;document.getElementById(&apos;size-14&apos;).onclick = size14;document.getElementById(&apos;size-16&apos;).onclick = size16;</code></pre><h3 id="2-封装、实现类和继承"><a href="#2-封装、实现类和继承" class="headerlink" title="2.封装、实现类和继承"></a>2.封装、实现类和继承</h3><p>在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。在JavaScript中，没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。</p><pre><code>function person(){       //变量作用域为函数内部，外部无法访问      var name = &quot;lilei&quot;;         return {         getName : function(){            return name;         },         setName : function(newName){            name = newName;         }      }    }；  var p = new Person();p.setName(&quot;Tom&quot;);alert(p.getName());  //Tomvar Jack = function(){};   Jack.prototype = new Person(); //继承自Person   Jack.prototype.Say = function(){  //添加私有方法    alert(&quot;Hello,my name is Jack&quot;);};var j = new Jack();j.setName(&quot;Jack&quot;);j.Say(); // Hello,my name is Jackalert(j.getName()); //Jack</code></pre><h2 id="使用闭包的注意点："><a href="#使用闭包的注意点：" class="headerlink" title="使用闭包的注意点："></a>使用闭包的注意点：</h2><p>1)  如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响，造成网页的性能问题</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是闭包&quot;&gt;&lt;a href=&quot;#1-什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;1.什么是闭包?&quot;&gt;&lt;/a&gt;1.什么是闭包?&lt;/h2&gt;&lt;p&gt;   官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。&lt;/p&gt;
&lt;p&gt;   em…太难懂了，我的理解是：&lt;strong&gt;闭包就是能够读取其他函数内部变量的函数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   这里就涉及到了JavaScript中的全局变量和局部变量，在函数内部的定义的变量，它的作用域只能在该函数内部使用，这就是一个局部变量；在该函数内部既可以读取全局变量也可以用内部定义的局部变量，而如何在函数的外部调用该函数的局部变量呢？&lt;/p&gt;
&lt;p&gt;   比如：如何获取f1()内n的值呢：&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://akirakk.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript闭包" scheme="https://akirakk.top/tags/JavaScript%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>最值得看的书籍</title>
    <link href="https://akirakk.top/2018/11/18/%E4%B8%80%E8%B5%B7%E7%9C%8B%E4%B9%A6%E5%90%A7/"/>
    <id>https://akirakk.top/2018/11/18/一起看书吧/</id>
    <published>2018-11-18T14:33:33.000Z</published>
    <updated>2018-11-18T15:36:27.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《浮生六记》"><a href="#《浮生六记》" class="headerlink" title="《浮生六记》"></a>《浮生六记》</h2><p>标签：清末小品</p><h3 id="内容简介："><a href="#内容简介：" class="headerlink" title="内容简介："></a>内容简介：</h3><p>《浮生六记》是清代文人沈复的自传散文，书中记闺房之乐，琴瑟相和、缱绻深情；记闲情雅趣，贫士心性、喜恶爱憎；记人生坎坷，困顿离合、人情世态；记各地浪游，山水名胜、奇闻趣观。作者以纯朴的文笔，记叙大半生的经历，欢愉和愁苦两相对照，真切动人。</p><h3 id="推荐语："><a href="#推荐语：" class="headerlink" title="推荐语："></a>推荐语：</h3><p>情至真，意至浓。然而言语恬静质朴，每次读都有新感动。<br><a id="more"></a></p><h2 id="《红玫瑰与白玫瑰》"><a href="#《红玫瑰与白玫瑰》" class="headerlink" title="《红玫瑰与白玫瑰》"></a>《红玫瑰与白玫瑰》</h2><p>标签：爱情 经典</p><h3 id="内容简介：-1"><a href="#内容简介：-1" class="headerlink" title="内容简介："></a>内容简介：</h3><p>本书收录了张爱玲1944年的中短篇小说作品。“也许每一个男子全都有过这样的两个女人，至少两个。娶了红玫瑰，久而久之，红的成了墙上的一抹蚊子血，白的还是”床前明月光”；娶了白玫瑰，白的便是衣服上沾的一粒饭粘子，红的却是心口上一颗朱砂痣”。因为《红玫瑰与白玫瑰》这句话成了脍炙人口的名言。</p><h3 id="推荐语：-1"><a href="#推荐语：-1" class="headerlink" title="推荐语："></a>推荐语：</h3><p>每次读来都不一样，才女，通透，犀利，悲剧。</p><h2 id="《繁花》"><a href="#《繁花》" class="headerlink" title="《繁花》"></a>《繁花》</h2><p>标签：传奇 上海</p><h3 id="内容简介：-2"><a href="#内容简介：-2" class="headerlink" title="内容简介："></a>内容简介：</h3><p>这是一部地域小说，人物的行走，可找到“有形”地图的对应。这也是一部记忆小说，六十年代的少年旧梦，辐射广泛，处处人间烟火的斑斓记忆，九十年代的声色犬马，是一场接一场的流水席，叙事在两个时空里频繁交替，传奇迭生，延伸了关于上海的“不一致”和错综复杂的局面，小心翼翼的嘲讽，咄咄逼人的漫画，暗藏上海的时尚与流行；昨日的遗漏，或是明天的启示……即使繁花零落，死神到来，一曲终了，人犹未散。</p><h3 id="推荐语：-2"><a href="#推荐语：-2" class="headerlink" title="推荐语："></a>推荐语：</h3><p>针脚绵密到极致，因地域小说的深深烙印让人更觉栩栩如生，仿佛身边家常闲话，却又有说不出韵味余长。只把弄堂男女的长情短爱都写了个透底朝天十分滋味。上海小囡应该不要错过。</p><h2 id="《受戒》"><a href="#《受戒》" class="headerlink" title="《受戒》"></a>《受戒》</h2><p>标签：小说 清透</p><h3 id="内容简介：-3"><a href="#内容简介：-3" class="headerlink" title="内容简介："></a>内容简介：</h3><p>《受戒》写了小和尚明海和小英子姑娘之间清爽、朦胧的爱情，并极富诗情地展现了20世纪30年代苏北里下河的田园风光。全文充斥着一种内在的欢乐，赞颂了纯朴健康的人性之美。</p><h3 id="推荐语：-3"><a href="#推荐语：-3" class="headerlink" title="推荐语："></a>推荐语：</h3><p>于平淡中见悠远，余味无穷，甚至几欲潸然泪下。</p><h2 id="《在细雨中呼喊》"><a href="#《在细雨中呼喊》" class="headerlink" title="《在细雨中呼喊》"></a>《在细雨中呼喊》</h2><p>标签：小说 人生</p><h3 id="内容简介：-4"><a href="#内容简介：-4" class="headerlink" title="内容简介："></a>内容简介：</h3><p>作者以第一人称讲述了一个家庭的欢乐和苦痛，细腻地刻画了柔弱的母亲如何完成了自己忍受的一生，她唯一爆发出来的愤怒是在弥留之际；名叫孙广财的父亲又是如何骄傲地将自己培养成一名彻头彻尾的无赖，他对待自己的父亲和对待自己的儿子，就像对待自己的绊脚石。家中的三兄弟的道路只是短暂地有过重叠，随即就又叉向了各自的方向。</p><h3 id="推荐语：-4"><a href="#推荐语：-4" class="headerlink" title="推荐语："></a>推荐语：</h3><p>在我看来，这是他最精致的小说，每一个故事都印象深刻。全文都在织就一场密密匝匝的细雨，一丝一丝的感伤沁心，在灰色的格调里，一星半点的柔情就显得格外动人，而文中各种蒙昧偏激与无奈无助又不停击打着读者，想叹，又叹不出什么来。</p><h2 id="《生死场》"><a href="#《生死场》" class="headerlink" title="《生死场》"></a>《生死场》</h2><p>标签：小说 人性</p><h3 id="内容简介：-5"><a href="#内容简介：-5" class="headerlink" title="内容简介："></a>内容简介：</h3><p>《生死场》是萧红一部传世的经典名篇，它对人性、人的生存这一古老的问题进行了透彻而深邃的诠释。这种对人生的生存死亡的思索，超出了同时代的绝大部分作家。鲁迅称它是“北方人民的对于生的坚强，对于死的挣扎”的一幅“力透纸背”的图画。</p><h3 id="推荐语：-5"><a href="#推荐语：-5" class="headerlink" title="推荐语："></a>推荐语：</h3><p>篇幅如此之小，却写到了如此的极致，生、病、死、情欲……一切都那么粗糙、蓬勃。萧红，我的最爱，没有之一。</p><h2 id="《人类简史》"><a href="#《人类简史》" class="headerlink" title="《人类简史》"></a>《人类简史》</h2><h3 id="简介-amp-推荐："><a href="#简介-amp-推荐：" class="headerlink" title="简介&amp;推荐："></a>简介&amp;推荐：</h3><p>从认知革命、农业革命到科学革命，我们真的了解自己吗？我们过得更加快乐吗？我们知道金钱和宗教从何而来，为何产生吗？人类创建的帝国为何一个个衰亡又兴起？为什么地球上几乎每一个社会都有男尊女卑的观念？为何一神教成为最为广泛接受的宗教？科学和资本主义如何成为现代社会最重要的信条？理清影响人类发展的重大脉络，挖掘人类文化、宗教、法律、国家、信贷等产生的根源。《人类简史》是一部宏大的人类简史，更见微知著、以小写大，让人类重新审视自己。</p><h2 id="《雪国》"><a href="#《雪国》" class="headerlink" title="《雪国》"></a>《雪国》</h2><p>标签：文学 清冽</p><h3 id="内容简介：-6"><a href="#内容简介：-6" class="headerlink" title="内容简介："></a>内容简介：</h3><p>故事由驶往雪国的列车开始，窗外不停掠过的暮景，映着玻璃上照出的少女的双眸，扑朔迷离。舞蹈艺术研究者岛村前后三次前往白雪皑皑的北国山村，与当地的艺伎驹子，以及萍水相逢的少女叶子，陷入爱恋纠葛，簌簌落下的雪掩盖了一切爱与徒劳……</p><h3 id="推荐语：-6"><a href="#推荐语：-6" class="headerlink" title="推荐语："></a>推荐语：</h3><p>生命的寒冷、温情与哀愁。在夏天可以感觉到寒冷，打开书就能置身于落满雪的山间日式小屋。川端康成的小说就如清酒，淡淡的淡淡的。</p><h2 id="《星星上的人》"><a href="#《星星上的人》" class="headerlink" title="《星星上的人》"></a>《星星上的人》</h2><p>标签： 治愈</p><h3 id="简介-amp-推荐：-1"><a href="#简介-amp-推荐：-1" class="headerlink" title="简介&amp;推荐："></a>简介&amp;推荐：</h3><p>也许，孤独是人与生俱来的天赋，我们都曾拥有，只是在时光中渐渐丧失。</p><p>哈蒙德一家住在华盛顿特区，一切似乎都很美满，直到大女儿蒂莉的言行明显变得异常。虽然蒂莉缺乏社交能力，却是个令人惊奇的天才。为了拯救孩子，哈蒙德一家参加了非常著名的“和谐夏令营”，这里的家庭各有各的痛苦和纠结。然而，没有想到的是，这次抛弃一切的旅行比蒂莉的疾病更加凶险。而危机到来之后的命运，到底要靠什么来拯救？这个以“和谐”命名的夏令营，究竟还隐藏了多少不为人知的秘密?</p><h2 id="《百年孤独》"><a href="#《百年孤独》" class="headerlink" title="《百年孤独》"></a>《百年孤独》</h2><h3 id="内容简介：-7"><a href="#内容简介：-7" class="headerlink" title="内容简介："></a>内容简介：</h3><p>《百年孤独》描写了布恩迪亚家族七代人的传奇故事，以及加勒比海沿岸小镇马孔多的百年兴衰，反映了拉丁美洲一个世纪以来风云变幻的历史。</p><p>当人类一次次试图超越自身局限去看清去思考自己的位置时，所得到的除了更深的虚无和无力感之外，别无所有。我们在无谓的纠结之中挣扎，却愈加深地堕入了无限的深渊之中，在孤独中挣扎，却终将被孤独吞噬。人类一切超越性的尝试与对终极命题的追寻最终却归于空虚。</p><p>作品融入神话传说、民间故事、宗教典故等神秘因素，巧妙地糅合了现实与虚幻。</p><h2 id="《杀死一只知更鸟》"><a href="#《杀死一只知更鸟》" class="headerlink" title="《杀死一只知更鸟》"></a>《杀死一只知更鸟》</h2><p>标签：成长</p><h3 id="内容简介：-8"><a href="#内容简介：-8" class="headerlink" title="内容简介："></a>内容简介：</h3><p>《杀死一只知更鸟》讲述了在二十世纪三十年代，大萧条时期美国南部的一个小镇，三个孩子平静的生活被两桩冤案彻底打破。</p><p>传闻与事实，坚强与软弱，正义与邪恶，忠诚与背叛，他们在痛苦与矛盾中艰难地拨开生活的重重迷雾。<br>见证了人性的污秽与光辉，理解了真相的残忍与无奈，也感受了人间的温暖与真情。</p><h3 id="推荐："><a href="#推荐：" class="headerlink" title="推荐："></a>推荐：</h3><p>成长总是个让人烦恼的命题。<br>成长有时会很缓慢，如小溪般唱着叮咚的歌曲趟过，有时却如此突如其来，如暴雨般劈头盖脸……<br>三个孩子因为小镇上的几桩冤案经历了猝不及防的成长——痛苦与迷惑，悲伤与愤怒，也有温情与感动。<br>这是爱与真知的成长经典。</p><h2 id="《人间失格》"><a href="#《人间失格》" class="headerlink" title="《人间失格》"></a>《人间失格》</h2><p>标签：自我</p><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>太宰治在《人间失格》中描写了生而为人最真切的痛苦，即自我与世界的斗争。<br>他用不留给自己一点退路的方式深刻剖析了自我，却在70年后的今天仍直逼现代人复杂的精神世界。</p><p>每个人都在这本书里看到不欲为人知的自己。面对世界，都曾有过带上面具，说违心的话的时候，但有的人把这副面孔戴得太久，以至于根本没办法摘下来了！<br>于是他变得更加不敢拒绝别人，害怕被当做异类，<br>不敢向这个世界展现真正的自己，最终失去了真正的自我……</p><p>摘录自推荐书：链接<a href="https://www.tuijianshu.net/" target="_blank" rel="noopener">https://www.tuijianshu.net/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《浮生六记》&quot;&gt;&lt;a href=&quot;#《浮生六记》&quot; class=&quot;headerlink&quot; title=&quot;《浮生六记》&quot;&gt;&lt;/a&gt;《浮生六记》&lt;/h2&gt;&lt;p&gt;标签：清末小品&lt;/p&gt;
&lt;h3 id=&quot;内容简介：&quot;&gt;&lt;a href=&quot;#内容简介：&quot; class=&quot;headerlink&quot; title=&quot;内容简介：&quot;&gt;&lt;/a&gt;内容简介：&lt;/h3&gt;&lt;p&gt;《浮生六记》是清代文人沈复的自传散文，书中记闺房之乐，琴瑟相和、缱绻深情；记闲情雅趣，贫士心性、喜恶爱憎；记人生坎坷，困顿离合、人情世态；记各地浪游，山水名胜、奇闻趣观。作者以纯朴的文笔，记叙大半生的经历，欢愉和愁苦两相对照，真切动人。&lt;/p&gt;
&lt;h3 id=&quot;推荐语：&quot;&gt;&lt;a href=&quot;#推荐语：&quot; class=&quot;headerlink&quot; title=&quot;推荐语：&quot;&gt;&lt;/a&gt;推荐语：&lt;/h3&gt;&lt;p&gt;情至真，意至浓。然而言语恬静质朴，每次读都有新感动。&lt;br&gt;
    
    </summary>
    
      <category term="书籍" scheme="https://akirakk.top/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="文学，书籍" scheme="https://akirakk.top/tags/%E6%96%87%E5%AD%A6%EF%BC%8C%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>javascript中Map,Reduce,Filter</title>
    <link href="https://akirakk.top/2018/11/18/javascript%E4%B8%ADMap-Reduce-Filter/"/>
    <id>https://akirakk.top/2018/11/18/javascript中Map-Reduce-Filter/</id>
    <published>2018-11-18T09:51:35.000Z</published>
    <updated>2018-11-18T14:20:24.637Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了一篇好文章 ，一次性科普了Javascript中Array的三个API： filter 、 map 和 reduce ，简直太生动形象，一下子就弄懂了，这是链接：<a href="https://atendesigngroup.com/blog/array-map-filter-and-reduce-js" title="链接" target="_blank" rel="noopener">https://atendesigngroup.com/blog/array-map-filter-and-reduce-js</a> 。</p><p>JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><h2 id="Map："><a href="#Map：" class="headerlink" title="Map："></a>Map：</h2><a id="more"></a><p><img src="https://i.imgur.com/QE7CQl8.jpg" alt=""></p><p>map() 方法通过对原数组中的每个元素进行一定的操作（共同调用一个方法），返回一个新的数组。比如：我们要把一个数组的每个元素都变为原来的2倍，调用Array的Map方法，传入的参数为我们自己的函数，返回一个新的数组作为结果。</p><pre><code>var numbers=[1,2,3,4,5];var newNumbers=numbers.map(function(n){    return n*2;});console.log(newNumbers);  //结果为[2,4,6,8,10]</code></pre><p>利用map()把字符串变成整数:</p><pre><code>var arr=[&apos;1&apos;,&apos;2&apos;,&apos;3&apos;];var r=arr.map(Number);console.log(r); //结果为：1,2,3为什么不使用parseInt？   由于map()接收的回调函数可以有3个参数：callback(currentValue, index, array)，   通常我们仅需要第一个参数，而忽略了传入的后面两个参数。   不幸的是，parseInt(string, radix)没有忽略第二个参数，导致实际执行的函数分别是：         parseInt(&apos;0&apos;, 0); // 0, 按十进制转换         parseInt(&apos;1&apos;, 1); // NaN, 没有一进制         parseInt(&apos;2&apos;, 2); // NaN, 按二进制转换不允许出现2   可以改为r = arr.map(Number);，因为Number(value)函数仅接收一个参数。</code></pre><h2 id="Filter："><a href="#Filter：" class="headerlink" title="Filter："></a>Filter：</h2><p><img src="https://i.imgur.com/FoBKdpS.jpg" alt=""></p><p>过滤器：它用于把Array的某些元素过滤掉，结果也生成了一个新数组，但新数组的长度小于或等于原数组。</p><p>和map()类似，filter()也接收一个函数。filter()接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示Array的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身。</p><p>比如：我们筛选出一个数组中所有的偶数。</p><pre><code>var arr=[1,2,3,4,5,6,7,8,9];var newArr=arr.filter(function(n){   return n%2==0;});console.log(newArr); //结果为：[2,4,6,8]</code></pre><p>利用filter，可以巧妙地去除Array的重复元素。</p><pre><code>var arr=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;s&apos;,&apos;a&apos;,&apos;d&apos;,&apos;c&apos;];var newArr=arr.filter(function(item,index,self){   return self.indexOf(item)===index;});  //indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被滤掉了console.log(newArr.toString()); //结果为：[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;s&apos;]</code></pre><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce:"></a>Reduce:</h2><p><img src="https://i.imgur.com/SzvFZyS.jpg" alt=""></p><p>通过遍历一个数组的每一项累积计算出一个新东西，其内部实现应该是遍历元素，理论上也可以通过for循环或forEach方法实现其功能。</p><p>内部实现的函数作用于这个数组上，且最少接收两个参数，第一个是从上次遍历中返回的值，第二个是当前数组遍历到的元素，第一次遍历运算后的返回值又将当做第一个参数被传入到下一次遍历，其效果就是：<code>[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</code></p><p>比如对一个Array求和，就可以用reduce实现：</p><pre><code>var arr=[1,2,3,4,5];var sum=arr.reduce(function(s,n){   return s+=n;},0);console.log(sum); //结果为：15</code></pre><h2 id="filter-、-map-和-reduce-共同点："><a href="#filter-、-map-和-reduce-共同点：" class="headerlink" title="filter 、 map 和 reduce 共同点："></a>filter 、 map 和 reduce 共同点：</h2><p>是并不会对原数组做任何改动，结果都是生成一个新变量。</p><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><p>Map和Reduce的混合使用：</p><p>不要使用JavaScript内置的parseInt()函数，利用map和reduce操作实现一个string2int()函数</p><pre><code>function string2int(s) {   var arr=[];   for(var i=0;i&lt;s.length;i++){      arr.push(s[i]);   }   return arr.map(function(x){return x*1;}).reduce(function(x,y){     return x*10+y;   });}// 测试:if (string2int(&apos;0&apos;) === 0 &amp;&amp; string2int(&apos;12345&apos;) === 12345 &amp;&amp; string2int(&apos;12300&apos;) === 12300) {    if (string2int.toString().indexOf(&apos;parseInt&apos;) !== -1) {       alert(&apos;请勿使用parseInt()!&apos;);    } else if (string2int.toString().indexOf(&apos;Number&apos;) !== -1) {       alert(&apos;请勿使用Number()!&apos;);    } else {       alert(&apos;测试通过!&apos;);    }}else {   alert(&apos;测试失败!&apos;);}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现了一篇好文章 ，一次性科普了Javascript中Array的三个API： filter 、 map 和 reduce ，简直太生动形象，一下子就弄懂了，这是链接：&lt;a href=&quot;https://atendesigngroup.com/blog/array-map-filter-and-reduce-js&quot; title=&quot;链接&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://atendesigngroup.com/blog/array-map-filter-and-reduce-js&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。&lt;/p&gt;
&lt;h2 id=&quot;Map：&quot;&gt;&lt;a href=&quot;#Map：&quot; class=&quot;headerlink&quot; title=&quot;Map：&quot;&gt;&lt;/a&gt;Map：&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://akirakk.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://akirakk.top/tags/JavaScript/"/>
    
      <category term="Map" scheme="https://akirakk.top/tags/Map/"/>
    
      <category term="Reduce" scheme="https://akirakk.top/tags/Reduce/"/>
    
      <category term="Filter" scheme="https://akirakk.top/tags/Filter/"/>
    
  </entry>
  
  <entry>
    <title>常用插件Fullpage.js的使用教程</title>
    <link href="https://akirakk.top/2018/11/16/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6Fullpage-js%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://akirakk.top/2018/11/16/常用插件Fullpage-js的使用教程/</id>
    <published>2018-11-16T08:46:01.000Z</published>
    <updated>2018-11-16T10:44:38.827Z</updated>
    
    <content type="html"><![CDATA[<p>使用Fullpage做的全屏滚动网页：<a href="https://akirakk.top/fullpage-test/">https://akirakk.top/fullpage-test/</a></p><h2 id="引入Fullpage"><a href="#引入Fullpage" class="headerlink" title="引入Fullpage"></a>引入Fullpage</h2><p>fullPage的github下载地址：<a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">https://github.com/alvarotrigo/fullPage.js</a>。</p><p>全屏插件fullPage.js依赖于jQuery，所以使用时，需要在引入fullpage.js之前，先引入jQuery。</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.3/fullpage.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;fullpage.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="编辑HTML"><a href="#编辑HTML" class="headerlink" title="编辑HTML"></a>编辑HTML</h2><p>使用fullPage.js时，默认情况下，每一屏幕的代码都需要有DIV包裹，其类名为section，第一个setion将作为首页显示在页面上；<br><a id="more"></a><br>    <div id="fullpage"><br>     <div class="section">section 01</div><br>     <div class="section">section 02</div><br>     <div class="section">section 03</div><br>     <div class="section">section 04</div><br>    </div></p><p>在section中添加div.slide类，FUllpage会自动生成左右滑动的幻灯片特效;其代码如下：</p><pre><code>&lt;div class=&quot;section&quot;&gt;  &lt;div class=&quot;slide&quot;&gt;slide 1&lt;/div&gt;  &lt;div class=&quot;slide&quot;&gt;slide 2&lt;/div&gt;  &lt;div class=&quot;slide&quot;&gt;slide 3&lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="初识化FullPage"><a href="#初识化FullPage" class="headerlink" title="初识化FullPage"></a>初识化FullPage</h3><p>在js文件中插入：</p><pre><code>$(document).ready(function() {   $(&apos;#fullpage&apos;).fullpage();});</code></pre><h2 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h2><h3 id="menu："><a href="#menu：" class="headerlink" title="menu："></a>menu：</h3><p>默认值：false，类似与Bootstrap的滚动监听，这样到滚动到某个section时，对应的导航菜单会被自动添加active类。</p><p>为了让自定义导航菜单和屏幕section互动，需要给菜单添加一个HTML5的自定义属性（data-menuanchor），需要和锚文本设置相同的内容；</p><pre><code>&lt;ul id=&quot;myMenu&quot;&gt;&lt;li data-menuanchor=&quot;Page05&quot;&gt;&lt;a href=&quot;#Page05&quot;&gt;联系&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page04&quot;&gt;&lt;a href=&quot;#Page04&quot;&gt;网站&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page03&quot;&gt;&lt;a href=&quot;#Page03&quot;&gt;设计&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page02&quot;&gt;&lt;a href=&quot;#Page02&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page01&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;#Page01&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>在js中同样设置anchors：</p><pre><code>$(&apos;#fullpage&apos;).fullpage({      animateAnchor:true,      anchors: [&apos;Page01&apos;, &apos;Page02&apos;, &apos;Page03&apos;, &apos;Page04&apos;, &apos;Page05&apos;],    menu: &apos;#myMenu&apos;})</code></pre><h3 id="anchor："><a href="#anchor：" class="headerlink" title="anchor："></a>anchor：</h3><p>定义导航的锚文本信息，每个导航文本之前用英文逗号（,）分隔，快速导航的锚文本URL也是使用的这个文本，浏览器通过此锚文本链接可以支持前进和后退按钮功能，如果你使用了此选项，那么网页中不能有相同的ID！</p><h3 id="navigation和slidesNavigation："><a href="#navigation和slidesNavigation：" class="headerlink" title="navigation和slidesNavigation："></a>navigation和slidesNavigation：</h3><p>navigation默认值：false，如果设置为true，那他将会显示一个小圆圈组成的快速导航栏；</p><p>slidesNavigation默认值：false，使用方法同navigation，是用户设置幻灯片的，不过这个参数设置的导航显示位置不同；</p><h3 id="navigationPosition和slidesNavPosition："><a href="#navigationPosition和slidesNavPosition：" class="headerlink" title="navigationPosition和slidesNavPosition："></a>navigationPosition和slidesNavPosition：</h3><p>navigationPosition默认值：none，结合参数navigation一起使用，用于设置navigation定义的菜单显示的位置，可以设置为left/right；</p><p>slidesNavPosition默认值：bottom，定义slidesNavigation中设置的导航菜单显示的位置，可选的设置值为top/bottom，你页可以修改CSS样式如颜色，位置等。</p><h3 id="navigationTooltips，showActiveTooltip："><a href="#navigationTooltips，showActiveTooltip：" class="headerlink" title="navigationTooltips，showActiveTooltip："></a>navigationTooltips，showActiveTooltip：</h3><p>navigationTooltips 默认值：[]，定义当navigation设置为true的时候，鼠标移动到快速导航上面的提示文本，每个属性中间用英文半角逗号（,）隔开。</p><p>showActiveTooltip 默认值：false，设置是否自动显示navigationTooltips中设置的工具提示文本。</p><h3 id="scrollingSpeed："><a href="#scrollingSpeed：" class="headerlink" title="scrollingSpeed："></a>scrollingSpeed：</h3><p>默认值：700，每个屏幕滚动动画执行的时间，时间的单位为毫秒（ms），也可以自定义动画执行时间。</p><h3 id="controlArrows："><a href="#controlArrows：" class="headerlink" title="controlArrows："></a>controlArrows：</h3><p>默认值：true，决定是否使用控制箭头向左或向右移动幻灯片。</p><h3 id="resize："><a href="#resize：" class="headerlink" title="resize："></a>resize：</h3><p>默认值：true，是否在窗口改变大小后，自动调整网页中字体的大小。</p><h3 id="paddingTop，paddingBottom："><a href="#paddingTop，paddingBottom：" class="headerlink" title="paddingTop，paddingBottom："></a>paddingTop，paddingBottom：</h3><p>paddingTop默认值：0，定义每个section固定的头部留白，例如设置paddingTop: ’10px’、 paddingTop: ’10em’、……，在使用固定表头的情况下有用的。</p><p>paddingBottom 默认值：0，定义每个section固定的底部留白，例如设置paddingBottom: ’10px’、 paddingBottom: ’10em’、……，在使用固定底部导航的情况下有用的。</p><h2 id="常用的回调函数："><a href="#常用的回调函数：" class="headerlink" title="常用的回调函数："></a>常用的回调函数：</h2><h3 id="onLeave-index-nextIndex-direction-："><a href="#onLeave-index-nextIndex-direction-：" class="headerlink" title="onLeave (index, nextIndex, direction)："></a>onLeave (index, nextIndex, direction)：</h3><p>滚动前的回调函数，index 是离开的“页面”的序号，从1开始计算；<br>nextIndex 是滚动到的“页面”的序号，从1开始计算；<br>direction 判断往上滚动还是往下滚动，值是 up 或 down；</p><pre><code>onLeave: function(index, nextIndex, direction){    if(index == 1){        执行代码；    }</code></pre><h3 id="afterLoad-anchorLink-index-："><a href="#afterLoad-anchorLink-index-：" class="headerlink" title="afterLoad (anchorLink, index)："></a>afterLoad (anchorLink, index)：</h3><p>滚动到某一屏后的回调函数，<br>anchorLink 是锚链接的名称；<br>index 是section的索引，从1开始计算；</p><p>用法同上；</p><h3 id="afterSlideLoad-anchorLink-index-slideAnchor-slideIndex-："><a href="#afterSlideLoad-anchorLink-index-slideAnchor-slideIndex-：" class="headerlink" title="afterSlideLoad (anchorLink, index, slideAnchor, slideIndex)："></a>afterSlideLoad (anchorLink, index, slideAnchor, slideIndex)：</h3><p>滚动到某一水平滑块后的回调函数，与 afterLoad 类似；</p><pre><code>afterSlideLoad: function(anchorLink, index, slideAnchor, slideIndex){if(index == 1 &amp;&amp; slideIndex==0 ){    执行代码；}</code></pre><h3 id="onSlideLeave-anchorLink-index-slideIndex-direction-nextSlideIndex"><a href="#onSlideLeave-anchorLink-index-slideIndex-direction-nextSlideIndex" class="headerlink" title="onSlideLeave (anchorLink, index, slideIndex, direction, nextSlideIndex):"></a>onSlideLeave (anchorLink, index, slideIndex, direction, nextSlideIndex):</h3><p>某一水平滑块滚动前的回调函数，与 onLeave 类似，接收 anchorLink、index、slideIndex、direction 4个参数;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Fullpage做的全屏滚动网页：&lt;a href=&quot;https://akirakk.top/fullpage-test/&quot;&gt;https://akirakk.top/fullpage-test/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;引入Fullpage&quot;&gt;&lt;a href=&quot;#引入Fullpage&quot; class=&quot;headerlink&quot; title=&quot;引入Fullpage&quot;&gt;&lt;/a&gt;引入Fullpage&lt;/h2&gt;&lt;p&gt;fullPage的github下载地址：&lt;a href=&quot;https://github.com/alvarotrigo/fullPage.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/alvarotrigo/fullPage.js&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;全屏插件fullPage.js依赖于jQuery，所以使用时，需要在引入fullpage.js之前，先引入jQuery。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.3/fullpage.css&amp;quot;&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;fullpage.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;编辑HTML&quot;&gt;&lt;a href=&quot;#编辑HTML&quot; class=&quot;headerlink&quot; title=&quot;编辑HTML&quot;&gt;&lt;/a&gt;编辑HTML&lt;/h2&gt;&lt;p&gt;使用fullPage.js时，默认情况下，每一屏幕的代码都需要有DIV包裹，其类名为section，第一个setion将作为首页显示在页面上；&lt;br&gt;
    
    </summary>
    
      <category term="Fullpage.js使用教程" scheme="https://akirakk.top/categories/Fullpage-js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="fullpage" scheme="https://akirakk.top/tags/fullpage/"/>
    
      <category term="常用插件" scheme="https://akirakk.top/tags/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>一个小白的python学习笔记02</title>
    <link href="https://akirakk.top/2018/11/15/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%99%BD%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <id>https://akirakk.top/2018/11/15/一个小白的python学习笔记02/</id>
    <published>2018-11-14T16:19:04.000Z</published>
    <updated>2018-11-16T08:49:20.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装"><a href="#集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装" class="headerlink" title="集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装"></a>集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装</h2><p>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……<br>PyCharm 下载地址 : <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a><br>PyCharm 安装地址：<a href="http://www.runoob.com/w3cnote/pycharm-windows-install.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p><h2 id="python的基础语法"><a href="#python的基础语法" class="headerlink" title="python的基础语法"></a>python的基础语法</h2><p>所有 Python 文件将以 .py 为扩展名。<br><a id="more"></a></p><ol><li>python的标识符：python的标识符是区分大小写的，是有字母、数字、下划线组成，但不能以数字开头。</li><li>以下划线开头的标识符是有特殊意义的。”单下划线” 开始的成员变量叫做保护变量，意思是只有类对象和自类对象自己能访问到这些变量。</li><li><p>以双下划线开头的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。<br>我们在使用的时候避免用下划线作为变量名的开始。</p><p>Python也可以同一行显示多条语句，方法是用分号 ; 分开。<br>Python中的保留字不能用作常数或变数，或任何其他标识符名称，ps：所有 Python 的关键字只包含小写字母。<br>查看关键字：help(“keywords”);<br><img src="https://img-blog.csdnimg.cn/20181029193101783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="python关键字"></p></li></ol><h2 id="行和缩进（敲重点）"><a href="#行和缩进（敲重点）" class="headerlink" title="行和缩进（敲重点）"></a>行和缩进（敲重点）</h2><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断，python 最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含<strong>相同的缩进</strong>空白数量，这个必须严格执行。如下：</p><p><img src="https://img-blog.csdnimg.cn/20181029194459618.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>否则会出现错误： IndentationError: unexpected indent , 意思就是编译器在告诉你”兄dei，你的格式错了，可能是tab和空格没对齐的问题”。<br><strong>so，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</strong></p><h2 id="Python的注释："><a href="#Python的注释：" class="headerlink" title="Python的注释："></a>Python的注释：</h2><p>python中单行注释采用 # 开头。<br>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)</p><h2 id="Python-变量类型："><a href="#Python-变量类型：" class="headerlink" title="Python 变量类型："></a>Python 变量类型：</h2><ol><li>Python 中的变量赋值不需要类型声明（等号“=”运算符左边是一个变量名,等号“=”运算符右边是存储在变量中的值）例如：num=12;str=”hello”;</li><li>Python中允许同时为多个变量赋值。例如：a=b=c=1; 创建一个整型对象值为1，三个变量被分配到相同的内存空间上。a,b,c=1,”akira”,2; 两个整型对象 1 和 2 分别分配给变量 a 和 c，字符串对象 “akira” 分配给变量b。</li><li>Python有五个标准的数据类型：<br>查看数据类型使用type()。</li></ol><p><strong>Numbers（数字）：</strong>   int（有符号整型），long（长整型[只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型；在 Python3.X 版本中 long 类型被移除，使用 int 替代。]），float（浮点型），complex（复数）。<br><strong>String（字符串）：</strong> 一般用双引号括起来。</p><p><strong>1、python的字串列表有2种取值顺序：</strong>从左到右索引默认0开始的，最大范围是字符串长度少1；从右到左索引默认-1开始的，最大范围是字符串开头。可以通过索引访问字符串中的字符，例如：str=”python”;我们可以用print(str[2]);打印出str中索引值为2的字符，结果是“t”；</p><p><strong>2、也可以使用 [头下标:尾下标] 来截取相应的字符串</strong>，注意（这里截取的字符串含头不含尾），其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。例如：str=”python”;print(str[2:5]);结果为“tho”；</p><p><strong>3、连接两个字符串可以使用+：</strong>例如：str=”hello”+”world”;此时str为”helloworld”。<br><strong>List（列表）：</strong>  列表用 [ ] 标识，它支持字符，数字，字符串甚至可以包含列表（即嵌套）。例如：list=[1,2,3,’a’,’b’,’c’]。列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表。 连接两个列表同样使用加号+。</p><p><strong>Tuple（元组）：</strong>  元组用”()”标识。内部元素用逗号隔开，但是元组不能二次赋值，相当于只读列表。</p><p><strong>Dictionary（字典）：</strong>  字典用”{ }”标识。字典由索引(key)和它对应的值value组成。例如：dict={‘a’:”abc”,’b’:”def”}<br>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。<em>列表是有序</em> 的对象集合，<em>字典是无序</em> 的对象集合。</p><p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。例如：print(dict[‘a’]);结果为“abc”。</p><p><strong>4. Python数据类型转换：</strong></p><p>   对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可</p><p>   <img src="https://img-blog.csdnimg.cn/2018102921060814.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="数据类型转换"></p><h2 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python 运算符"></a>Python 运算符</h2><ol><li>Python算术运算符：<br>以下假设变量a为10，变量b为20<img src="https://img-blog.csdnimg.cn/20181029211141308.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="算术运算符"></li><li>Python比较运算符：<br>以下假设变量a为10，变量b为20<br><img src="https://img-blog.csdnimg.cn/20181029211421373.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Python赋值运算符：<br><img src="https://img-blog.csdnimg.cn/20181029211650760.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Python位运算符：<br>位运算符是把数字看作二进制来进行计算的<br><img src="https://img-blog.csdnimg.cn/20181029212051619.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Python逻辑运算符：<br> and：    x and y    布尔”与” ， 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。<br> or：x or y    布尔”或”    ，如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。<br> not：not x    布尔”非” ， 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。<ol start="6"><li>Python成员运算符：<br>in：如果在指定的序列中找到值返回 True，否则返回 False。<br>not in：如果在指定的序列中没有找到值返回 True，否则返回 False。</li></ol></li><li>Python身份运算符：<br>is：是判断两个标识符是不是引用自一个对象，即是否是同一个id。返回值为布尔值true或者false。<br>is not：是判断两个标识符是不是引用自不同对象</li><li>Python运算符优先级：</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装&quot;&gt;&lt;a href=&quot;#集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装&quot; class=&quot;headerlink&quot; title=&quot;集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装&quot;&gt;&lt;/a&gt;集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装&lt;/h2&gt;&lt;p&gt;PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……&lt;br&gt;PyCharm 下载地址 : &lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jetbrains.com/pycharm/download/&lt;/a&gt;&lt;br&gt;PyCharm 安装地址：&lt;a href=&quot;http://www.runoob.com/w3cnote/pycharm-windows-install.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/w3cnote/pycharm-windows-install.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python的基础语法&quot;&gt;&lt;a href=&quot;#python的基础语法&quot; class=&quot;headerlink&quot; title=&quot;python的基础语法&quot;&gt;&lt;/a&gt;python的基础语法&lt;/h2&gt;&lt;p&gt;所有 Python 文件将以 .py 为扩展名。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://akirakk.top/categories/python/"/>
    
    
      <category term="python学习笔记" scheme="https://akirakk.top/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://akirakk.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一个小白的python学习笔记01</title>
    <link href="https://akirakk.top/2018/11/14/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%99%BD%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>https://akirakk.top/2018/11/14/一个小白的python学习笔记01/</id>
    <published>2018-11-14T14:59:53.000Z</published>
    <updated>2018-11-18T12:07:43.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="好的，先来了解下Python吧-gt-o）"><a href="#好的，先来了解下Python吧-gt-o）" class="headerlink" title="好的，先来了解下Python吧(&gt;.o）"></a>好的，先来了解下Python吧(&gt;.o）</h1><h2 id="1-为什么要学习Python？"><a href="#1-为什么要学习Python？" class="headerlink" title="1. 为什么要学习Python？"></a>1. 为什么要学习Python？</h2><p> 兴趣！！！</p><h2 id="2-python的发展历史及特点："><a href="#2-python的发展历史及特点：" class="headerlink" title="2. python的发展历史及特点："></a>2. python的发展历史及特点：</h2><p>发展历史：</p><p>   Python 是由荷兰人 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。1991年，第一版基于C实现的Python编译器诞生。后来随着互联网时代的到来，开源及社区合作的方式蓬勃发展，Python也借此上了发展的快车道。发展至今，Python渐渐成了最流行的语言之一。更详细的指路：<a href="https://blog.csdn.net/xun527/article/details/80264911" target="_blank" rel="noopener">人生苦短我用python     </a><br><a id="more"></a><br>   特点：</p><pre><code>易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。易于阅读：Python代码定义的更清晰。易于维护：Python的成功在于它的源代码是相当容易维护的。一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断可移植：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。数据库：Python提供所有主要的商业数据库的接口。GUI编程：Python支持GUI可以创建和移植到许多系统调用。可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得&quot;脚本化&quot;的能力</code></pre><h2 id="3-python的环境搭建"><a href="#3-python的环境搭建" class="headerlink" title="3. python的环境搭建"></a>3. python的环境搭建</h2><p>   python的下载：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">python官网</a></p><p>   需要下载3.x.x和2.x.x两个版本<img src="https://img-blog.csdnimg.cn/20181029180016437.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt=""><br>   3.x.x的下载：<br>   <img src="https://img-blog.csdnimg.cn/20181029180309608.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  2.x.x的下载：<br>  <img src="https://img-blog.csdnimg.cn/20181029180621206.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   在下载列表中选择Window平台安装包，下载后，双击下载包，进入 Python 安装向导，安装非常简单，使用默认的设置一直点击”下一步”直到安装完成OK了。</p><p>   Windows 下的环境变量配置：<br>   右键点击”计算机”，然后点击”属性”，点击”高级系统设置”。</p><p>   选择”系统变量”窗口下面的”Path”,双击即可，然后在”Path”行，添加python安装路径(我的是E:\download\Python32) ps：路径直接用分号”；”隔开。</p><p>最后设置成功以后，在cmd命令行，输入命令”python”，显示出python的相关信息，环境搭建完成。</p><h2 id="4-第一个python程序来了"><a href="#4-第一个python程序来了" class="headerlink" title="4.第一个python程序来了"></a>4.第一个python程序来了</h2><p>  <img src="https://img-blog.csdnimg.cn/20181029181837737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;好的，先来了解下Python吧-gt-o）&quot;&gt;&lt;a href=&quot;#好的，先来了解下Python吧-gt-o）&quot; class=&quot;headerlink&quot; title=&quot;好的，先来了解下Python吧(&amp;gt;.o）&quot;&gt;&lt;/a&gt;好的，先来了解下Python吧(&amp;gt;.o）&lt;/h1&gt;&lt;h2 id=&quot;1-为什么要学习Python？&quot;&gt;&lt;a href=&quot;#1-为什么要学习Python？&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么要学习Python？&quot;&gt;&lt;/a&gt;1. 为什么要学习Python？&lt;/h2&gt;&lt;p&gt; 兴趣！！！&lt;/p&gt;
&lt;h2 id=&quot;2-python的发展历史及特点：&quot;&gt;&lt;a href=&quot;#2-python的发展历史及特点：&quot; class=&quot;headerlink&quot; title=&quot;2. python的发展历史及特点：&quot;&gt;&lt;/a&gt;2. python的发展历史及特点：&lt;/h2&gt;&lt;p&gt;发展历史：&lt;/p&gt;
&lt;p&gt;   Python 是由荷兰人 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。1991年，第一版基于C实现的Python编译器诞生。后来随着互联网时代的到来，开源及社区合作的方式蓬勃发展，Python也借此上了发展的快车道。发展至今，Python渐渐成了最流行的语言之一。更详细的指路：&lt;a href=&quot;https://blog.csdn.net/xun527/article/details/80264911&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;人生苦短我用python
     &lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://akirakk.top/categories/python/"/>
    
    
      <category term="python学习笔记" scheme="https://akirakk.top/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python环境配置" scheme="https://akirakk.top/tags/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="python" scheme="https://akirakk.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客流程</title>
    <link href="https://akirakk.top/2018/11/12/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/"/>
    <id>https://akirakk.top/2018/11/12/Hexo搭建个人博客流程/</id>
    <published>2018-11-12T12:39:53.000Z</published>
    <updated>2018-11-15T09:52:09.124Z</updated>
    
    <content type="html"><![CDATA[<p>本流程主要针对Windows系统</p><h3 id="搭建博客之前的准备工作："><a href="#搭建博客之前的准备工作：" class="headerlink" title="搭建博客之前的准备工作："></a>搭建博客之前的准备工作：</h3><h4 id="1-搭建Node-js环境"><a href="#1-搭建Node-js环境" class="headerlink" title="1. 搭建Node.js环境"></a>1. 搭建Node.js环境</h4><p>   Node.js主要用于安装hexo，Hexo是高效的静态站点生成框架，基于Node.js，所以搭建博客网站首先需要安装Node.js环境。</p><p>   下载地址： <a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download </a></p><p>   安装测试：win+R 打开命令行后使用node -v 、npm -v，查看显示版本号即安装成功。<br><a id="more"></a></p><h4 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h4><p>   在控制台输入如下命令：<br>    <code>npm install hexo-cli -g</code></p><p>   创建放置博客文件的文件夹：Blog文件夹；在自己想要的位置创建文件夹，例如我的文件夹的位置为D:\Blog</p><p>   从控制台进入Blog文件夹：依次输入 <code>D:</code>，<code>cd Blog</code></p><p>   在该文件夹下下载搭建网站所需的所有文件 <code>hexo init</code></p><p>   安装依赖： <code>npm install</code></p><p>   生成静态文件： <code>hexo g</code></p><p>   启动服务器，主要用来本地预览： <code>hexo s</code></p><p>   然后用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，此时，一个本地的博客已经简单搭建完毕，hexo初始化使用的默认主题是landscape。</p><h4 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3. 安装Git"></a>3. 安装Git</h4><p>   Git是目前最流行的分布式版本控制系统，使用Git可以帮助我们把本地的网页和文章等内容提交到Gihub上，实现同步。</p><p>   下载地址：<a href="https://git-scm.com/download/" target="_blank" rel="noopener">https://git-scm.com/download/</a></p><p>   安装测试： 命令行输入git –version，显示版本号即成功</p><h4 id="4-注册Github帐号"><a href="#4-注册Github帐号" class="headerlink" title="4. 注册Github帐号"></a>4. 注册Github帐号</h4><p>   gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管。</p><p>   注册地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com </a></p><p>   流程如果不懂，就百度一下吧，用户名、邮箱和密码之后都需要用到，自己记好。</p><h3 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h3><h4 id="1-通过Github-Pages新建一个仓库"><a href="#1-通过Github-Pages新建一个仓库" class="headerlink" title="1.通过Github Pages新建一个仓库"></a>1.通过Github Pages新建一个仓库</h4><p>   repository相当于一个仓库，用来放置代码文件。首先，登陆进入Github，并进入个人页面，点击+，选择 new repository，填写Repository name，并选择下方的public，确认 create repository。</p><h4 id="2-部署本地文件到github"><a href="#2-部署本地文件到github" class="headerlink" title="2.部署本地文件到github"></a>2.部署本地文件到github</h4><p>   此时repository已经创建好了，编辑D:\Blog下的_config.yml文件，建议使用Notepad++或者sublime。</p><p>   找到我们的博客仓库，并拷贝仓库地址:</p><p>   <img src="https://i.imgur.com/j6WDA8N.jpg" alt=""></p><p>   在_config.yml最下方，添加如下配置：（hexo的配置文件中任何’:’ 后面都是带一个空格的）</p><p>   <img src="https://i.imgur.com/ckTwdlr.png" alt=""></p><p>   配置好_config.yml并保存后，执行以下命令部署到Github上:</p><p>   <code>hexo g #完整命令为hexo generate，用于生成静态文件</code></p><p>   <code>hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</code></p><p>   执行上面的第二个命令，可能会要你输入用户名和密码，输入密码是不显示任何东西的，输入完毕回车即可。</p><p>   此时，博客已经搭建起来，并发布到Github上了，通过访问链接：<a href="https://userName.github.io，就会发现这里的界面和本地的一样了" target="_blank" rel="noopener">https://userName.github.io，就会发现这里的界面和本地的一样了</a></p><h4 id="3-发布博客"><a href="#3-发布博客" class="headerlink" title="3.发布博客"></a>3.发布博客</h4><p>   好的，我们来尝试一下发布自己的第一篇博客：</p><p>   控制台进入在本地博客文件夹根目录输入：<code>hexo new &quot;第一篇博客&quot;</code></p><p>   在D:\Blog\source_post中打开第一篇博客.md，打开方式使用记事本或notepad++，hexo中写文章使用的是Markdown，你可以在在使用markdown编辑文章。</p><p>   写完文章后，你可以使用<code>$ hexo g</code>生成静态文件。<code>$ hexo s</code>在本地预览效果。<code>$ hexo d</code>同步到github，然后使用<a href="http://username.github.io进行访问" target="_blank" rel="noopener">http://username.github.io进行访问</a></p><p>   博客网站配置及美化，以及主题更换这里就不多介绍，需要的话请多百度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本流程主要针对Windows系统&lt;/p&gt;
&lt;h3 id=&quot;搭建博客之前的准备工作：&quot;&gt;&lt;a href=&quot;#搭建博客之前的准备工作：&quot; class=&quot;headerlink&quot; title=&quot;搭建博客之前的准备工作：&quot;&gt;&lt;/a&gt;搭建博客之前的准备工作：&lt;/h3&gt;&lt;h4 id=&quot;1-搭建Node-js环境&quot;&gt;&lt;a href=&quot;#1-搭建Node-js环境&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建Node.js环境&quot;&gt;&lt;/a&gt;1. 搭建Node.js环境&lt;/h4&gt;&lt;p&gt;   Node.js主要用于安装hexo，Hexo是高效的静态站点生成框架，基于Node.js，所以搭建博客网站首先需要安装Node.js环境。&lt;/p&gt;
&lt;p&gt;   下载地址： &lt;a href=&quot;http://nodejs.cn/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nodejs.cn/download &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   安装测试：win+R 打开命令行后使用node -v 、npm -v，查看显示版本号即安装成功。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://akirakk.top/categories/hexo/"/>
    
    
      <category term="个人博客搭建" scheme="https://akirakk.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo" scheme="https://akirakk.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://akirakk.top/2018/11/09/hello-world/"/>
    <id>https://akirakk.top/2018/11/09/hello-world/</id>
    <published>2018-11-09T10:15:08.344Z</published>
    <updated>2018-11-15T09:51:46.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
