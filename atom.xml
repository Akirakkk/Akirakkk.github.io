<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Akira&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://akirakk.top/"/>
  <updated>2018-11-16T10:06:20.657Z</updated>
  <id>https://akirakk.top/</id>
  
  <author>
    <name>Akira</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用插件Fullpage.js的使用教程</title>
    <link href="https://akirakk.top/2018/11/16/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6Fullpage-js%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://akirakk.top/2018/11/16/常用插件Fullpage-js的使用教程/</id>
    <published>2018-11-16T08:46:01.000Z</published>
    <updated>2018-11-16T10:06:20.657Z</updated>
    
    <content type="html"><![CDATA[<p>使用Fullpage做的全屏滚动网页：<a href="https://akirakk.top/fullpage-test/">https://akirakk.top/fullpage-test/</a></p><h2 id="引入Fullpage"><a href="#引入Fullpage" class="headerlink" title="引入Fullpage"></a>引入Fullpage</h2><p>fullPage的github下载地址：<a href="https://github.com/alvarotrigo/fullPage.js" target="_blank" rel="noopener">https://github.com/alvarotrigo/fullPage.js</a>。</p><p>全屏插件fullPage.js依赖于jQuery，所以使用时，需要在引入fullpage.js之前，先引入jQuery。</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/fullPage.js/3.0.3/fullpage.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;fullpage.js&quot;&gt;&lt;/script&gt;</code></pre><h2 id="编辑HTML"><a href="#编辑HTML" class="headerlink" title="编辑HTML"></a>编辑HTML</h2><p>使用fullPage.js时，默认情况下，每一屏幕的代码都需要有DIV包裹，其类名为section，第一个setion将作为首页显示在页面上；</p><pre><code>&lt;div id=&quot;fullpage&quot;&gt; &lt;div class=&quot;section&quot;&gt;section 01&lt;/div&gt; &lt;div class=&quot;section&quot;&gt;section 02&lt;/div&gt; &lt;div class=&quot;section&quot;&gt;section 03&lt;/div&gt; &lt;div class=&quot;section&quot;&gt;section 04&lt;/div&gt;&lt;/div&gt;</code></pre><p>在section中添加div.slide类，FUllpage会自动生成左右滑动的幻灯片特效;其代码如下：</p><pre><code>&lt;div class=&quot;section&quot;&gt;  &lt;div class=&quot;slide&quot;&gt;slide 1&lt;/div&gt;  &lt;div class=&quot;slide&quot;&gt;slide 2&lt;/div&gt;  &lt;div class=&quot;slide&quot;&gt;slide 3&lt;/div&gt;&lt;/div&gt;</code></pre><h3 id="初识化FullPage"><a href="#初识化FullPage" class="headerlink" title="初识化FullPage"></a>初识化FullPage</h3><p>在js文件中插入：</p><pre><code>$(document).ready(function() {   $(&apos;#fullpage&apos;).fullpage();});</code></pre><h2 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h2><h3 id="menu："><a href="#menu：" class="headerlink" title="menu："></a>menu：</h3><p>默认值：false，类似与Bootstrap的滚动监听，这样到滚动到某个section时，对应的导航菜单会被自动添加active类。</p><p>为了让自定义导航菜单和屏幕section互动，需要给菜单添加一个HTML5的自定义属性（data-menuanchor），需要和锚文本设置相同的内容；</p><pre><code>&lt;ul id=&quot;myMenu&quot;&gt;&lt;li data-menuanchor=&quot;Page05&quot;&gt;&lt;a href=&quot;#Page05&quot;&gt;联系&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page04&quot;&gt;&lt;a href=&quot;#Page04&quot;&gt;网站&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page03&quot;&gt;&lt;a href=&quot;#Page03&quot;&gt;设计&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page02&quot;&gt;&lt;a href=&quot;#Page02&quot;&gt;关于&lt;/a&gt;&lt;/li&gt;&lt;li data-menuanchor=&quot;Page01&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;#Page01&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>在js中同样设置anchors：</p><pre><code>$(&apos;#fullpage&apos;).fullpage({      animateAnchor:true,      anchors: [&apos;Page01&apos;, &apos;Page02&apos;, &apos;Page03&apos;, &apos;Page04&apos;, &apos;Page05&apos;],    menu: &apos;#myMenu&apos;})</code></pre><h3 id="anchor："><a href="#anchor：" class="headerlink" title="anchor："></a>anchor：</h3><p>定义导航的锚文本信息，每个导航文本之前用英文逗号（,）分隔，快速导航的锚文本URL也是使用的这个文本，浏览器通过此锚文本链接可以支持前进和后退按钮功能，如果你使用了此选项，那么网页中不能有相同的ID！</p><h3 id="navigation和slidesNavigation："><a href="#navigation和slidesNavigation：" class="headerlink" title="navigation和slidesNavigation："></a>navigation和slidesNavigation：</h3><p>navigation默认值：false，如果设置为true，那他将会显示一个小圆圈组成的快速导航栏；</p><p>slidesNavigation默认值：false，使用方法同navigation，是用户设置幻灯片的，不过这个参数设置的导航显示位置不同；</p><h3 id="navigationPosition和slidesNavPosition："><a href="#navigationPosition和slidesNavPosition：" class="headerlink" title="navigationPosition和slidesNavPosition："></a>navigationPosition和slidesNavPosition：</h3><p>navigationPosition默认值：none，结合参数navigation一起使用，用于设置navigation定义的菜单显示的位置，可以设置为left/right；</p><p>slidesNavPosition默认值：bottom，定义slidesNavigation中设置的导航菜单显示的位置，可选的设置值为top/bottom，你页可以修改CSS样式如颜色，位置等。</p><h3 id="navigationTooltips，showActiveTooltip："><a href="#navigationTooltips，showActiveTooltip：" class="headerlink" title="navigationTooltips，showActiveTooltip："></a>navigationTooltips，showActiveTooltip：</h3><p>navigationTooltips 默认值：[]，定义当navigation设置为true的时候，鼠标移动到快速导航上面的提示文本，每个属性中间用英文半角逗号（,）隔开。</p><p>showActiveTooltip 默认值：false，设置是否自动显示navigationTooltips中设置的工具提示文本。</p><h3 id="scrollingSpeed："><a href="#scrollingSpeed：" class="headerlink" title="scrollingSpeed："></a>scrollingSpeed：</h3><p>默认值：700，每个屏幕滚动动画执行的时间，时间的单位为毫秒（ms），也可以自定义动画执行时间。</p><h3 id="controlArrows："><a href="#controlArrows：" class="headerlink" title="controlArrows："></a>controlArrows：</h3><p>默认值：true，决定是否使用控制箭头向左或向右移动幻灯片。</p><h3 id="resize："><a href="#resize：" class="headerlink" title="resize："></a>resize：</h3><p>默认值：true，是否在窗口改变大小后，自动调整网页中字体的大小。</p><h3 id="paddingTop，paddingBottom："><a href="#paddingTop，paddingBottom：" class="headerlink" title="paddingTop，paddingBottom："></a>paddingTop，paddingBottom：</h3><p>paddingTop默认值：0，定义每个section固定的头部留白，例如设置paddingTop: ’10px’、 paddingTop: ’10em’、……，在使用固定表头的情况下有用的。</p><p>paddingBottom 默认值：0，定义每个section固定的底部留白，例如设置paddingBottom: ’10px’、 paddingBottom: ’10em’、……，在使用固定底部导航的情况下有用的。</p><h2 id="常用的回调函数："><a href="#常用的回调函数：" class="headerlink" title="常用的回调函数："></a>常用的回调函数：</h2><h3 id="onLeave-index-nextIndex-direction-："><a href="#onLeave-index-nextIndex-direction-：" class="headerlink" title="onLeave (index, nextIndex, direction)："></a>onLeave (index, nextIndex, direction)：</h3><p>滚动前的回调函数，index 是离开的“页面”的序号，从1开始计算；<br>nextIndex 是滚动到的“页面”的序号，从1开始计算；<br>direction 判断往上滚动还是往下滚动，值是 up 或 down；</p><pre><code>onLeave: function(index, nextIndex, direction){    if(index == 1){        执行代码；    }</code></pre><h3 id="afterLoad-anchorLink-index-："><a href="#afterLoad-anchorLink-index-：" class="headerlink" title="afterLoad (anchorLink, index)："></a>afterLoad (anchorLink, index)：</h3><p>滚动到某一屏后的回调函数，<br>anchorLink 是锚链接的名称；<br>index 是section的索引，从1开始计算；</p><p>用法同上；</p><h3 id="afterSlideLoad-anchorLink-index-slideAnchor-slideIndex-："><a href="#afterSlideLoad-anchorLink-index-slideAnchor-slideIndex-：" class="headerlink" title="afterSlideLoad (anchorLink, index, slideAnchor, slideIndex)："></a>afterSlideLoad (anchorLink, index, slideAnchor, slideIndex)：</h3><p>滚动到某一水平滑块后的回调函数，与 afterLoad 类似；</p><pre><code>afterSlideLoad: function(anchorLink, index, slideAnchor, slideIndex){if(index == 1 &amp;&amp; slideIndex==0 ){    执行代码；}</code></pre><h3 id="onSlideLeave-anchorLink-index-slideIndex-direction-nextSlideIndex"><a href="#onSlideLeave-anchorLink-index-slideIndex-direction-nextSlideIndex" class="headerlink" title="onSlideLeave (anchorLink, index, slideIndex, direction, nextSlideIndex):"></a>onSlideLeave (anchorLink, index, slideIndex, direction, nextSlideIndex):</h3><p>某一水平滑块滚动前的回调函数，与 onLeave 类似，接收 anchorLink、index、slideIndex、direction 4个参数;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Fullpage做的全屏滚动网页：&lt;a href=&quot;https://akirakk.top/fullpage-test/&quot;&gt;https://akirakk.top/fullpage-test/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;引入Fullpage&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Fullpage.js使用教程" scheme="https://akirakk.top/categories/Fullpage-js%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="fullpage" scheme="https://akirakk.top/tags/fullpage/"/>
    
      <category term="常用插件" scheme="https://akirakk.top/tags/%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>一个小白的python学习笔记02</title>
    <link href="https://akirakk.top/2018/11/15/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%99%BD%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/"/>
    <id>https://akirakk.top/2018/11/15/一个小白的python学习笔记02/</id>
    <published>2018-11-14T16:19:04.000Z</published>
    <updated>2018-11-16T08:49:20.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装"><a href="#集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装" class="headerlink" title="集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装"></a>集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装</h2><p>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……<br>PyCharm 下载地址 : <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/download/</a><br>PyCharm 安装地址：<a href="http://www.runoob.com/w3cnote/pycharm-windows-install.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p><h2 id="python的基础语法"><a href="#python的基础语法" class="headerlink" title="python的基础语法"></a>python的基础语法</h2><p>所有 Python 文件将以 .py 为扩展名。<br><a id="more"></a></p><ol><li>python的标识符：python的标识符是区分大小写的，是有字母、数字、下划线组成，但不能以数字开头。</li><li>以下划线开头的标识符是有特殊意义的。”单下划线” 开始的成员变量叫做保护变量，意思是只有类对象和自类对象自己能访问到这些变量。</li><li><p>以双下划线开头的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。<br>我们在使用的时候避免用下划线作为变量名的开始。</p><p>Python也可以同一行显示多条语句，方法是用分号 ; 分开。<br>Python中的保留字不能用作常数或变数，或任何其他标识符名称，ps：所有 Python 的关键字只包含小写字母。<br>查看关键字：help(“keywords”);<br><img src="https://img-blog.csdnimg.cn/20181029193101783.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="python关键字"></p></li></ol><h2 id="行和缩进（敲重点）"><a href="#行和缩进（敲重点）" class="headerlink" title="行和缩进（敲重点）"></a>行和缩进（敲重点）</h2><p>学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断，python 最具特色的就是用缩进来写模块。<br>缩进的空白数量是可变的，但是所有代码块语句必须包含<strong>相同的缩进</strong>空白数量，这个必须严格执行。如下：</p><p><img src="https://img-blog.csdnimg.cn/20181029194459618.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>否则会出现错误： IndentationError: unexpected indent , 意思就是编译器在告诉你”兄dei，你的格式错了，可能是tab和空格没对齐的问题”。<br><strong>so，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</strong></p><h2 id="Python的注释："><a href="#Python的注释：" class="headerlink" title="Python的注释："></a>Python的注释：</h2><p>python中单行注释采用 # 开头。<br>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)</p><h2 id="Python-变量类型："><a href="#Python-变量类型：" class="headerlink" title="Python 变量类型："></a>Python 变量类型：</h2><ol><li>Python 中的变量赋值不需要类型声明（等号“=”运算符左边是一个变量名,等号“=”运算符右边是存储在变量中的值）例如：num=12;str=”hello”;</li><li>Python中允许同时为多个变量赋值。例如：a=b=c=1; 创建一个整型对象值为1，三个变量被分配到相同的内存空间上。a,b,c=1,”akira”,2; 两个整型对象 1 和 2 分别分配给变量 a 和 c，字符串对象 “akira” 分配给变量b。</li><li>Python有五个标准的数据类型：<br>查看数据类型使用type()。</li></ol><p><strong>Numbers（数字）：</strong>   int（有符号整型），long（长整型[只存在于 Python2.X 版本中，在 2.2 以后的版本中，int 类型数据溢出后会自动转为long类型；在 Python3.X 版本中 long 类型被移除，使用 int 替代。]），float（浮点型），complex（复数）。<br><strong>String（字符串）：</strong> 一般用双引号括起来。</p><p><strong>1、python的字串列表有2种取值顺序：</strong>从左到右索引默认0开始的，最大范围是字符串长度少1；从右到左索引默认-1开始的，最大范围是字符串开头。可以通过索引访问字符串中的字符，例如：str=”python”;我们可以用print(str[2]);打印出str中索引值为2的字符，结果是“t”；</p><p><strong>2、也可以使用 [头下标:尾下标] 来截取相应的字符串</strong>，注意（这里截取的字符串含头不含尾），其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。例如：str=”python”;print(str[2:5]);结果为“tho”；</p><p><strong>3、连接两个字符串可以使用+：</strong>例如：str=”hello”+”world”;此时str为”helloworld”。<br><strong>List（列表）：</strong>  列表用 [ ] 标识，它支持字符，数字，字符串甚至可以包含列表（即嵌套）。例如：list=[1,2,3,’a’,’b’,’c’]。列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表。 连接两个列表同样使用加号+。</p><p><strong>Tuple（元组）：</strong>  元组用”()”标识。内部元素用逗号隔开，但是元组不能二次赋值，相当于只读列表。</p><p><strong>Dictionary（字典）：</strong>  字典用”{ }”标识。字典由索引(key)和它对应的值value组成。例如：dict={‘a’:”abc”,’b’:”def”}<br>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。<em>列表是有序</em> 的对象集合，<em>字典是无序</em> 的对象集合。</p><p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。例如：print(dict[‘a’]);结果为“abc”。</p><p><strong>4. Python数据类型转换：</strong></p><p>   对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可</p><p>   <img src="https://img-blog.csdnimg.cn/2018102921060814.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="数据类型转换"></p><h2 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python 运算符"></a>Python 运算符</h2><ol><li>Python算术运算符：<br>以下假设变量a为10，变量b为20<img src="https://img-blog.csdnimg.cn/20181029211141308.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="算术运算符"></li><li>Python比较运算符：<br>以下假设变量a为10，变量b为20<br><img src="https://img-blog.csdnimg.cn/20181029211421373.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Python赋值运算符：<br><img src="https://img-blog.csdnimg.cn/20181029211650760.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Python位运算符：<br>位运算符是把数字看作二进制来进行计算的<br><img src="https://img-blog.csdnimg.cn/20181029212051619.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>Python逻辑运算符：<br> and：    x and y    布尔”与” ， 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。<br> or：x or y    布尔”或”    ，如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。<br> not：not x    布尔”非” ， 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。<ol start="6"><li>Python成员运算符：<br>in：如果在指定的序列中找到值返回 True，否则返回 False。<br>not in：如果在指定的序列中没有找到值返回 True，否则返回 False。</li></ol></li><li>Python身份运算符：<br>is：是判断两个标识符是不是引用自一个对象，即是否是同一个id。返回值为布尔值true或者false。<br>is not：是判断两个标识符是不是引用自不同对象</li><li>Python运算符优先级：</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装&quot;&gt;&lt;a href=&quot;#集成开发环境（IDE：Integrated-Development-Environment）-PyCharm的安装&quot; class=&quot;headerlink&quot; title=&quot;集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装&quot;&gt;&lt;/a&gt;集成开发环境（IDE：Integrated Development Environment）: PyCharm的安装&lt;/h2&gt;&lt;p&gt;PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……&lt;br&gt;PyCharm 下载地址 : &lt;a href=&quot;https://www.jetbrains.com/pycharm/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jetbrains.com/pycharm/download/&lt;/a&gt;&lt;br&gt;PyCharm 安装地址：&lt;a href=&quot;http://www.runoob.com/w3cnote/pycharm-windows-install.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/w3cnote/pycharm-windows-install.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;python的基础语法&quot;&gt;&lt;a href=&quot;#python的基础语法&quot; class=&quot;headerlink&quot; title=&quot;python的基础语法&quot;&gt;&lt;/a&gt;python的基础语法&lt;/h2&gt;&lt;p&gt;所有 Python 文件将以 .py 为扩展名。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://akirakk.top/categories/python/"/>
    
    
      <category term="python学习笔记" scheme="https://akirakk.top/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python" scheme="https://akirakk.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一个小白的python学习笔记01</title>
    <link href="https://akirakk.top/2018/11/14/%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%99%BD%E7%9A%84python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <id>https://akirakk.top/2018/11/14/一个小白的python学习笔记01/</id>
    <published>2018-11-14T14:59:53.000Z</published>
    <updated>2018-11-15T09:52:31.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="好的，先来了解下Python吧-gt-o）"><a href="#好的，先来了解下Python吧-gt-o）" class="headerlink" title="好的，先来了解下Python吧(&gt;.o）"></a>好的，先来了解下Python吧(&gt;.o）</h1><h2 id="1-为什么要学习Python？"><a href="#1-为什么要学习Python？" class="headerlink" title="1. 为什么要学习Python？"></a>1. 为什么要学习Python？</h2><p> 兴趣！！！</p><h2 id="2-python的发展历史及特点："><a href="#2-python的发展历史及特点：" class="headerlink" title="2. python的发展历史及特点："></a>2. python的发展历史及特点：</h2><p>发展历史：</p><p>   Python 是由荷兰人 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。1991年，第一版基于C实现的Python编译器诞生。后来随着互联网时代的到来，开源及社区合作的方式蓬勃发展，Python也借此上了发展的快车道。发展至今，Python渐渐成了最流行的语言之一。更详细的指路：<a href="https://blog.csdn.net/xun527/article/details/80264911" target="_blank" rel="noopener">人生苦短我用python     </a><br><a id="more"></a><br>   特点：</p><pre><code>易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。易于阅读：Python代码定义的更清晰。易于维护：Python的成功在于它的源代码是相当容易维护的。一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断可移植：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。数据库：Python提供所有主要的商业数据库的接口。GUI编程：Python支持GUI可以创建和移植到许多系统调用。可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得&quot;脚本化&quot;的能力</code></pre><h2 id="3-python的环境搭建"><a href="#3-python的环境搭建" class="headerlink" title="3. python的环境搭建"></a>3. python的环境搭建</h2><p>   python的下载：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="noopener">python官网</a></p><p>   需要下载3.x.x和2.x.x两个版本<img src="https://img-blog.csdnimg.cn/20181029180016437.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt=""><br>   3.x.x的下载：<br>   <img src="https://img-blog.csdnimg.cn/20181029180309608.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>  2.x.x的下载：<br>  <img src="https://img-blog.csdnimg.cn/20181029180621206.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   在下载列表中选择Window平台安装包，下载后，双击下载包，进入 Python 安装向导，安装非常简单，使用默认的设置一直点击”下一步”直到安装完成OK了。</p><p>   Windows 下的环境变量配置：<br>   右键点击”计算机”，然后点击”属性”，点击”高级系统设置”。</p><p>   选择”系统变量”窗口下面的”Path”,双击即可，然后在”Path”行，添加python安装路径(我的是E:\download\Python32) ps：路径直接用分号”；”隔开。</p><p>最后设置成功以后，在cmd命令行，输入命令”python”，显示出python的相关信息，环境搭建完成。</p><h2 id="4-第一个python程序来了"><a href="#4-第一个python程序来了" class="headerlink" title="4.第一个python程序来了"></a>4.第一个python程序来了</h2><p>  <img src="https://img-blog.csdnimg.cn/20181029181837737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FraXJhX0s=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;好的，先来了解下Python吧-gt-o）&quot;&gt;&lt;a href=&quot;#好的，先来了解下Python吧-gt-o）&quot; class=&quot;headerlink&quot; title=&quot;好的，先来了解下Python吧(&amp;gt;.o）&quot;&gt;&lt;/a&gt;好的，先来了解下Python吧(&amp;gt;.o）&lt;/h1&gt;&lt;h2 id=&quot;1-为什么要学习Python？&quot;&gt;&lt;a href=&quot;#1-为什么要学习Python？&quot; class=&quot;headerlink&quot; title=&quot;1. 为什么要学习Python？&quot;&gt;&lt;/a&gt;1. 为什么要学习Python？&lt;/h2&gt;&lt;p&gt; 兴趣！！！&lt;/p&gt;
&lt;h2 id=&quot;2-python的发展历史及特点：&quot;&gt;&lt;a href=&quot;#2-python的发展历史及特点：&quot; class=&quot;headerlink&quot; title=&quot;2. python的发展历史及特点：&quot;&gt;&lt;/a&gt;2. python的发展历史及特点：&lt;/h2&gt;&lt;p&gt;发展历史：&lt;/p&gt;
&lt;p&gt;   Python 是由荷兰人 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。1991年，第一版基于C实现的Python编译器诞生。后来随着互联网时代的到来，开源及社区合作的方式蓬勃发展，Python也借此上了发展的快车道。发展至今，Python渐渐成了最流行的语言之一。更详细的指路：&lt;a href=&quot;https://blog.csdn.net/xun527/article/details/80264911&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;人生苦短我用python
     &lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://akirakk.top/categories/python/"/>
    
    
      <category term="python学习笔记" scheme="https://akirakk.top/tags/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="python环境配置" scheme="https://akirakk.top/tags/python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="python" scheme="https://akirakk.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客流程</title>
    <link href="https://akirakk.top/2018/11/12/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%B5%81%E7%A8%8B/"/>
    <id>https://akirakk.top/2018/11/12/Hexo搭建个人博客流程/</id>
    <published>2018-11-12T12:39:53.000Z</published>
    <updated>2018-11-15T09:52:09.124Z</updated>
    
    <content type="html"><![CDATA[<p>本流程主要针对Windows系统</p><h3 id="搭建博客之前的准备工作："><a href="#搭建博客之前的准备工作：" class="headerlink" title="搭建博客之前的准备工作："></a>搭建博客之前的准备工作：</h3><h4 id="1-搭建Node-js环境"><a href="#1-搭建Node-js环境" class="headerlink" title="1. 搭建Node.js环境"></a>1. 搭建Node.js环境</h4><p>   Node.js主要用于安装hexo，Hexo是高效的静态站点生成框架，基于Node.js，所以搭建博客网站首先需要安装Node.js环境。</p><p>   下载地址： <a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download </a></p><p>   安装测试：win+R 打开命令行后使用node -v 、npm -v，查看显示版本号即安装成功。<br><a id="more"></a></p><h4 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2. 安装Hexo"></a>2. 安装Hexo</h4><p>   在控制台输入如下命令：<br>    <code>npm install hexo-cli -g</code></p><p>   创建放置博客文件的文件夹：Blog文件夹；在自己想要的位置创建文件夹，例如我的文件夹的位置为D:\Blog</p><p>   从控制台进入Blog文件夹：依次输入 <code>D:</code>，<code>cd Blog</code></p><p>   在该文件夹下下载搭建网站所需的所有文件 <code>hexo init</code></p><p>   安装依赖： <code>npm install</code></p><p>   生成静态文件： <code>hexo g</code></p><p>   启动服务器，主要用来本地预览： <code>hexo s</code></p><p>   然后用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，此时，一个本地的博客已经简单搭建完毕，hexo初始化使用的默认主题是landscape。</p><h4 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3. 安装Git"></a>3. 安装Git</h4><p>   Git是目前最流行的分布式版本控制系统，使用Git可以帮助我们把本地的网页和文章等内容提交到Gihub上，实现同步。</p><p>   下载地址：<a href="https://git-scm.com/download/" target="_blank" rel="noopener">https://git-scm.com/download/</a></p><p>   安装测试： 命令行输入git –version，显示版本号即成功</p><h4 id="4-注册Github帐号"><a href="#4-注册Github帐号" class="headerlink" title="4. 注册Github帐号"></a>4. 注册Github帐号</h4><p>   gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管。</p><p>   注册地址：<a href="https://github.com" target="_blank" rel="noopener">https://github.com </a></p><p>   流程如果不懂，就百度一下吧，用户名、邮箱和密码之后都需要用到，自己记好。</p><h3 id="开始搭建博客"><a href="#开始搭建博客" class="headerlink" title="开始搭建博客"></a>开始搭建博客</h3><h4 id="1-通过Github-Pages新建一个仓库"><a href="#1-通过Github-Pages新建一个仓库" class="headerlink" title="1.通过Github Pages新建一个仓库"></a>1.通过Github Pages新建一个仓库</h4><p>   repository相当于一个仓库，用来放置代码文件。首先，登陆进入Github，并进入个人页面，点击+，选择 new repository，填写Repository name，并选择下方的public，确认 create repository。</p><h4 id="2-部署本地文件到github"><a href="#2-部署本地文件到github" class="headerlink" title="2.部署本地文件到github"></a>2.部署本地文件到github</h4><p>   此时repository已经创建好了，编辑D:\Blog下的_config.yml文件，建议使用Notepad++或者sublime。</p><p>   找到我们的博客仓库，并拷贝仓库地址:</p><p>   <img src="https://i.imgur.com/j6WDA8N.jpg" alt=""></p><p>   在_config.yml最下方，添加如下配置：（hexo的配置文件中任何’:’ 后面都是带一个空格的）</p><p>   <img src="https://i.imgur.com/ckTwdlr.png" alt=""></p><p>   配置好_config.yml并保存后，执行以下命令部署到Github上:</p><p>   <code>hexo g #完整命令为hexo generate，用于生成静态文件</code></p><p>   <code>hexo d #完整命令为hexo deploy，用于将本地文件发布到github上</code></p><p>   执行上面的第二个命令，可能会要你输入用户名和密码，输入密码是不显示任何东西的，输入完毕回车即可。</p><p>   此时，博客已经搭建起来，并发布到Github上了，通过访问链接：<a href="https://userName.github.io，就会发现这里的界面和本地的一样了" target="_blank" rel="noopener">https://userName.github.io，就会发现这里的界面和本地的一样了</a></p><h4 id="3-发布博客"><a href="#3-发布博客" class="headerlink" title="3.发布博客"></a>3.发布博客</h4><p>   好的，我们来尝试一下发布自己的第一篇博客：</p><p>   控制台进入在本地博客文件夹根目录输入：<code>hexo new &quot;第一篇博客&quot;</code></p><p>   在D:\Blog\source_post中打开第一篇博客.md，打开方式使用记事本或notepad++，hexo中写文章使用的是Markdown，你可以在在使用markdown编辑文章。</p><p>   写完文章后，你可以使用<code>$ hexo g</code>生成静态文件。<code>$ hexo s</code>在本地预览效果。<code>$ hexo d</code>同步到github，然后使用<a href="http://username.github.io进行访问" target="_blank" rel="noopener">http://username.github.io进行访问</a></p><p>   博客网站配置及美化，以及主题更换这里就不多介绍，需要的话请多百度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本流程主要针对Windows系统&lt;/p&gt;
&lt;h3 id=&quot;搭建博客之前的准备工作：&quot;&gt;&lt;a href=&quot;#搭建博客之前的准备工作：&quot; class=&quot;headerlink&quot; title=&quot;搭建博客之前的准备工作：&quot;&gt;&lt;/a&gt;搭建博客之前的准备工作：&lt;/h3&gt;&lt;h4 id=&quot;1-搭建Node-js环境&quot;&gt;&lt;a href=&quot;#1-搭建Node-js环境&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建Node.js环境&quot;&gt;&lt;/a&gt;1. 搭建Node.js环境&lt;/h4&gt;&lt;p&gt;   Node.js主要用于安装hexo，Hexo是高效的静态站点生成框架，基于Node.js，所以搭建博客网站首先需要安装Node.js环境。&lt;/p&gt;
&lt;p&gt;   下载地址： &lt;a href=&quot;http://nodejs.cn/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nodejs.cn/download &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;   安装测试：win+R 打开命令行后使用node -v 、npm -v，查看显示版本号即安装成功。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://akirakk.top/categories/hexo/"/>
    
    
      <category term="个人博客搭建" scheme="https://akirakk.top/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo" scheme="https://akirakk.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://akirakk.top/2018/11/09/hello-world/"/>
    <id>https://akirakk.top/2018/11/09/hello-world/</id>
    <published>2018-11-09T10:15:08.344Z</published>
    <updated>2018-11-15T09:51:46.283Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
